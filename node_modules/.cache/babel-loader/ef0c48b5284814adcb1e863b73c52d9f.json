{"ast":null,"code":"var _jsxFileName = \"/Users/batapatn/Documents/myRepos/uko-javascript/src/contexts/SettingsContext.jsx\",\n    _s = $RefreshSig$();\n\nimport useLocalStorage from \"hooks/useLocalStorage\";\nimport { createContext } from \"react\";\nimport { THEMES } from \"../constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialSettings = {\n  direction: \"ltr\",\n  theme: THEMES.LIGHT,\n  responsiveFontSizes: true\n};\nexport const SettingsContext = /*#__PURE__*/createContext({\n  settings: initialSettings,\n  saveSettings: arg => {}\n}); // component props type\n\nconst SettingsProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const {\n    data: settings,\n    storeData: setSettings\n  } = useLocalStorage(\"settings\", initialSettings);\n\n  const saveSettings = updateSettings => {\n    setSettings(updateSettings);\n  };\n\n  return /*#__PURE__*/_jsxDEV(SettingsContext.Provider, {\n    value: {\n      settings,\n      saveSettings\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 10\n  }, this);\n};\n\n_s(SettingsProvider, \"rDW6P1wyUJ02OjZjDr1ZTW11klU=\", false, function () {\n  return [useLocalStorage];\n});\n\n_c = SettingsProvider;\nexport default SettingsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"SettingsProvider\");","map":{"version":3,"sources":["/Users/batapatn/Documents/myRepos/uko-javascript/src/contexts/SettingsContext.jsx"],"names":["useLocalStorage","createContext","THEMES","initialSettings","direction","theme","LIGHT","responsiveFontSizes","SettingsContext","settings","saveSettings","arg","SettingsProvider","children","data","storeData","setSettings","updateSettings"],"mappings":";;;AAAA,OAAOA,eAAP,MAA4B,uBAA5B;AACA,SAASC,aAAT,QAA8B,OAA9B;AACA,SAASC,MAAT,QAAuB,cAAvB;;AACA,MAAMC,eAAe,GAAG;AACtBC,EAAAA,SAAS,EAAE,KADW;AAEtBC,EAAAA,KAAK,EAAEH,MAAM,CAACI,KAFQ;AAGtBC,EAAAA,mBAAmB,EAAE;AAHC,CAAxB;AAKA,OAAO,MAAMC,eAAe,gBAAGP,aAAa,CAAC;AAC3CQ,EAAAA,QAAQ,EAAEN,eADiC;AAE3CO,EAAAA,YAAY,EAAEC,GAAG,IAAI,CAAE;AAFoB,CAAD,CAArC,C,CAGH;;AAEJ,MAAMC,gBAAgB,GAAG,QAEnB;AAAA;;AAAA,MAFoB;AACxBC,IAAAA;AADwB,GAEpB;AACJ,QAAM;AACJC,IAAAA,IAAI,EAAEL,QADF;AAEJM,IAAAA,SAAS,EAAEC;AAFP,MAGFhB,eAAe,CAAC,UAAD,EAAaG,eAAb,CAHnB;;AAKA,QAAMO,YAAY,GAAGO,cAAc,IAAI;AACrCD,IAAAA,WAAW,CAACC,cAAD,CAAX;AACD,GAFD;;AAIA,sBAAO,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAE;AACtCR,MAAAA,QADsC;AAEtCC,MAAAA;AAFsC,KAAjC;AAAA,cAIFG;AAJE;AAAA;AAAA;AAAA;AAAA,UAAP;AAMD,CAlBD;;GAAMD,gB;UAMAZ,e;;;KANAY,gB;AAoBN,eAAeA,gBAAf","sourcesContent":["import useLocalStorage from \"hooks/useLocalStorage\";\nimport { createContext } from \"react\";\nimport { THEMES } from \"../constants\";\nconst initialSettings = {\n  direction: \"ltr\",\n  theme: THEMES.LIGHT,\n  responsiveFontSizes: true\n};\nexport const SettingsContext = createContext({\n  settings: initialSettings,\n  saveSettings: arg => {}\n}); // component props type\n\nconst SettingsProvider = ({\n  children\n}) => {\n  const {\n    data: settings,\n    storeData: setSettings\n  } = useLocalStorage(\"settings\", initialSettings);\n\n  const saveSettings = updateSettings => {\n    setSettings(updateSettings);\n  };\n\n  return <SettingsContext.Provider value={{\n    settings,\n    saveSettings\n  }}>\n      {children}\n    </SettingsContext.Provider>;\n};\n\nexport default SettingsProvider;"]},"metadata":{},"sourceType":"module"}