{"ast":null,"code":"import jwt from \"jsonwebtoken\";\nimport Mock from \"__fakeApi__/mock\";\nconst JWT_SECRET = \"jwt_secret_key\";\nconst JWT_VALIDITY = \"7 days\";\nconst userList = [{\n  id: 1,\n  role: \"SA\",\n  name: \"Jason Alexander\",\n  username: \"jason_alexander\",\n  email: \"demo@example.com\",\n  avatar: \"/static/avatar/001-man.svg\",\n  age: 25 // password: 'v&)3?2]:'\n\n}];\nMock.onPost(\"/api/auth/login\").reply(async config => {\n  try {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    const {\n      email\n    } = JSON.parse(config.data);\n    const user = userList.find(user => user.email === email);\n\n    if (!user) {\n      return [400, {\n        message: \"Invalid email or password\"\n      }];\n    }\n\n    const accessToken = jwt.sign({\n      userId: user.id\n    }, JWT_SECRET, {\n      expiresIn: JWT_VALIDITY\n    });\n    return [200, {\n      accessToken,\n      user: {\n        id: user.id,\n        avatar: user.avatar,\n        email: user.email,\n        name: user.name,\n        role: user.role\n      }\n    }];\n  } catch (error) {\n    console.error(error);\n    return [500, {\n      message: \"Internal server error\"\n    }];\n  }\n});\nMock.onPost(\"/api/auth/register\").reply(async config => {\n  try {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    const {\n      email,\n      username\n    } = JSON.parse(config.data);\n    const user = userList.find(user => user.email === email);\n\n    if (user) {\n      return [400, {\n        message: \"User already exists!\"\n      }];\n    }\n\n    const newUser = {\n      id: 2,\n      role: \"GUEST\",\n      name: \"\",\n      username: username,\n      email: email,\n      avatar: \"/static/avatar/001-man.svg\",\n      age: 25\n    };\n    userList.push(newUser);\n    const accessToken = jwt.sign({\n      userId: newUser.id\n    }, JWT_SECRET, {\n      expiresIn: JWT_VALIDITY\n    });\n    return [200, {\n      accessToken,\n      user: {\n        id: newUser.id,\n        avatar: newUser.avatar,\n        email: newUser.email,\n        name: newUser.name,\n        username: newUser.username,\n        role: newUser.role\n      }\n    }];\n  } catch (error) {\n    console.error(error);\n    return [500, {\n      message: \"Internal server error\"\n    }];\n  }\n});\nMock.onGet(\"/api/auth/profile\").reply(config => {\n  try {\n    //@ts-ignore\n    const {\n      Authorization\n    } = config.headers;\n\n    if (!Authorization) {\n      return [401, {\n        message: \"Invalid Authorization token\"\n      }];\n    }\n\n    const accessToken = Authorization.split(\" \")[1];\n    const {\n      userId\n    } = jwt.verify(accessToken, JWT_SECRET);\n    const user = userList.find(u => u.id === userId);\n\n    if (!user) {\n      return [401, {\n        message: \"Invalid authorization token\"\n      }];\n    }\n\n    return [200, {\n      user: {\n        id: user.id,\n        avatar: user.avatar,\n        email: user.email,\n        name: user.name,\n        role: user.role\n      }\n    }];\n  } catch (err) {\n    console.error(err);\n    return [500, {\n      message: \"Internal server error\"\n    }];\n  }\n});","map":{"version":3,"sources":["/Users/batapatn/Documents/myRepos/uko-javascript/src/__fakeApi__/users.js"],"names":["jwt","Mock","JWT_SECRET","JWT_VALIDITY","userList","id","role","name","username","email","avatar","age","onPost","reply","config","Promise","resolve","setTimeout","JSON","parse","data","user","find","message","accessToken","sign","userId","expiresIn","error","console","newUser","push","onGet","Authorization","headers","split","verify","u","err"],"mappings":"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","sourcesContent":["import jwt from \"jsonwebtoken\";\nimport Mock from \"__fakeApi__/mock\";\nconst JWT_SECRET = \"jwt_secret_key\";\nconst JWT_VALIDITY = \"7 days\";\nconst userList = [{\n  id: 1,\n  role: \"SA\",\n  name: \"Jason Alexander\",\n  username: \"jason_alexander\",\n  email: \"demo@example.com\",\n  avatar: \"/static/avatar/001-man.svg\",\n  age: 25 // password: 'v&)3?2]:'\n\n}];\nMock.onPost(\"/api/auth/login\").reply(async config => {\n  try {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    const {\n      email\n    } = JSON.parse(config.data);\n    const user = userList.find(user => user.email === email);\n\n    if (!user) {\n      return [400, {\n        message: \"Invalid email or password\"\n      }];\n    }\n\n    const accessToken = jwt.sign({\n      userId: user.id\n    }, JWT_SECRET, {\n      expiresIn: JWT_VALIDITY\n    });\n    return [200, {\n      accessToken,\n      user: {\n        id: user.id,\n        avatar: user.avatar,\n        email: user.email,\n        name: user.name,\n        role: user.role\n      }\n    }];\n  } catch (error) {\n    console.error(error);\n    return [500, {\n      message: \"Internal server error\"\n    }];\n  }\n});\nMock.onPost(\"/api/auth/register\").reply(async config => {\n  try {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    const {\n      email,\n      username\n    } = JSON.parse(config.data);\n    const user = userList.find(user => user.email === email);\n\n    if (user) {\n      return [400, {\n        message: \"User already exists!\"\n      }];\n    }\n\n    const newUser = {\n      id: 2,\n      role: \"GUEST\",\n      name: \"\",\n      username: username,\n      email: email,\n      avatar: \"/static/avatar/001-man.svg\",\n      age: 25\n    };\n    userList.push(newUser);\n    const accessToken = jwt.sign({\n      userId: newUser.id\n    }, JWT_SECRET, {\n      expiresIn: JWT_VALIDITY\n    });\n    return [200, {\n      accessToken,\n      user: {\n        id: newUser.id,\n        avatar: newUser.avatar,\n        email: newUser.email,\n        name: newUser.name,\n        username: newUser.username,\n        role: newUser.role\n      }\n    }];\n  } catch (error) {\n    console.error(error);\n    return [500, {\n      message: \"Internal server error\"\n    }];\n  }\n});\nMock.onGet(\"/api/auth/profile\").reply(config => {\n  try {\n    //@ts-ignore\n    const {\n      Authorization\n    } = config.headers;\n\n    if (!Authorization) {\n      return [401, {\n        message: \"Invalid Authorization token\"\n      }];\n    }\n\n    const accessToken = Authorization.split(\" \")[1];\n    const {\n      userId\n    } = jwt.verify(accessToken, JWT_SECRET);\n    const user = userList.find(u => u.id === userId);\n\n    if (!user) {\n      return [401, {\n        message: \"Invalid authorization token\"\n      }];\n    }\n\n    return [200, {\n      user: {\n        id: user.id,\n        avatar: user.avatar,\n        email: user.email,\n        name: user.name,\n        role: user.role\n      }\n    }];\n  } catch (err) {\n    console.error(err);\n    return [500, {\n      message: \"Internal server error\"\n    }];\n  }\n});"]},"metadata":{},"sourceType":"module"}